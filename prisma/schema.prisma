generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CompanyType {
  EDUCACIONAL
  RESTAURANTE
  CONDOMINIO
  EMPRESA
}

enum Role {
  SYS_ADMIN
  MANAGER_USER
  STANDARD_USER
}

enum State {
  AC
  AL
  AP
  AM
  BA
  CE
  DF
  ES
  GO
  MA
  MT
  MS
  MG
  PA
  PB
  PR
  PE
  PI
  RJ
  RN
  RS
  RO
  RR
  SC
  SP
  SE
  TO
}

model Instituition {
  id            String       @id @default(cuid())
  razaoSocial   String
  cnpj          String       @unique
  tipo          CompanyType
  addresses     Adrress[]
  users         User[]       // Relação 1:N: uma Instituition tem vários usuários
}

model Adrress {
  id              String        @id @default(cuid())
  cep             String
  street          String
  number          String
  city            String
  state           State

  instituitionId  String
  instituition    Instituition  @relation(fields: [instituitionId], references: [id])
}

model User {
  id              String          @id @default(cuid())
  name            String?
  email           String          @unique
  password        String?
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  Authenticator   Authenticator[]
  role            Role            @default(STANDARD_USER)

  instituitionId  String?
  instituition    Instituition?    @relation(fields: [instituitionId], references: [id])

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
