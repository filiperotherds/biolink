generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CompanyType {
  EDUCATIONAL
  RESTAURANT
  CONDOMINIUM
  COMPANY
}

enum Role {
  SYS_ADMIN
  MANAGER_USER
  STANDARD_USER
}

enum State {
  AC
  AL
  AP
  AM
  BA
  CE
  DF
  ES
  GO
  MA
  MT
  MS
  MG
  PA
  PB
  PR
  PE
  PI
  RJ
  RN
  RS
  RO
  RR
  SC
  SP
  SE
  TO
}

enum CollectionStatus {
  PENDING_APPROVAL
  APPROVED
  IN_PROGRESS
  COMPLETED
  CLOSED
}

enum ContainerStatus {
  AVAILABLE
  ASSIGNED
  MAINTENANCE
}

model Institution {
  id                     String                 @id @default(cuid())
  businessName           String
  cnpj                   String                 @unique
  type                   CompanyType

  addresses              Address[]
  users                  User[]

  collectionRequests     CollectionRequest[]
  containerAssignments   ContainerAssignment[]

  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
}

model Address {
  id                     String       @id @default(cuid())
  zipCode                String
  street                 String
  number                 String
  city                   String
  state                  State

  institutionId          String
  institution            Institution  @relation(fields: [institutionId], references: [id])

  // Back-relation: any CollectionRequest that uses this as its pickup address
  pickupRequests         CollectionRequest[] @relation("PickupAddress")

  createdAt              DateTime     @default(now())
  updatedAt              DateTime     @updatedAt
}

model User {
  id                        String                  @id @default(cuid())
  name                      String?
  email                     String                  @unique
  password                  String?
  emailVerified             DateTime?
  image                     String?
  role                      Role                    @default(STANDARD_USER)

  institutionId             String?
  institution               Institution?            @relation(fields: [institutionId], references: [id])

  accounts                  Account[]
  sessions                  Session[]
  authenticators            Authenticator[]

  createdCollectionRequests  CollectionRequest[]   @relation("CreatedCollectionRequests")
  approvedCollectionRequests CollectionRequest[]   @relation("ApprovedCollectionRequests")
  closedCollectionRequests   CollectionRequest[]   @relation("ClosedCollectionRequests")

  assignedContainers         ContainerAssignment[] @relation("AssignedContainers")

  createdAt                  DateTime               @default(now())
  updatedAt                  DateTime               @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

/// ------------------------------
/// Collection Flow Models
/// ------------------------------

model CollectionRequest {
  id                String           @id @default(cuid())
  description       String?
  createdAt         DateTime         @default(now())

  createdById       String
  createdBy         User             @relation("CreatedCollectionRequests", fields: [createdById], references: [id])

  institutionId     String
  institution       Institution      @relation(fields: [institutionId], references: [id])

  status            CollectionStatus @default(PENDING_APPROVAL)

  approvedById      String?
  approvedBy        User?            @relation("ApprovedCollectionRequests", fields: [approvedById], references: [id])
  approvedAt        DateTime?

  completedAt       DateTime?

  closedById        String?
  closedBy          User?            @relation("ClosedCollectionRequests", fields: [closedById], references: [id])
  closedAt          DateTime?

  pickupAddressId   String?
  pickupAddress     Address?         @relation("PickupAddress", fields: [pickupAddressId], references: [id])

  @@index([status])
  @@index([institutionId])
}

model Container {
  id            String               @id @default(uuid())
  name          String
  volume        Float
  imagePath     String?
  status        ContainerStatus      @default(AVAILABLE)

  assignments   ContainerAssignment[]

  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt

  @@index([status])
}

model ContainerAssignment {
  id               String       @id @default(cuid())

  containerId      String
  container        Container    @relation(fields: [containerId], references: [id])

  institutionId    String
  institution      Institution  @relation(fields: [institutionId], references: [id])

  assignedById     String
  assignedBy       User         @relation("AssignedContainers", fields: [assignedById], references: [id])

  startDate        DateTime     @default(now())
  endDate          DateTime?

  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@index([containerId])
  @@index([institutionId])
}